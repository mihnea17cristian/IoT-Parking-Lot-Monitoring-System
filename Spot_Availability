#include <WiFi.h>
#include <Arduino.h>
#include <Wire.h>
#include <PCF8574.h>
#include <PubSubClient.h>

// WLAN Configuration
const char* ssid = "network";
const char* password = "password";
const char* mqtt_server = "192.168.0.153";
// Set your Static IP address
IPAddress ip(192, 168, 0, 133);
// Set your Gateway IP address
IPAddress gateway(192, 168, 0, 1);
IPAddress subnet(255, 255, 0, 0);

// Variables that limit the measurements
unsigned long previousMillis = 0;
const long interval = 5000;

// Initialising WiFi & MQTT clients
WiFiClient esp32Client;
PubSubClient client(esp32Client);

// Reconnects the MQTT client
void reconnect() {
  while (!client.connected()) {
    if (client.connect("ESP32Client")) {
      Serial.println("conectat");  
      client.subscribe("reserve");
    } else {
      Serial.print("esuat, rc=");
      Serial.print(client.state());
      delay(5000);
    }
  }
}

// Reconnects the client to WLAN
void setup_wifi() {
  delay(1000);
  WiFi.mode(WIFI_STA);
  WiFi.config(ip, gateway, subnet);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Nod conectat la WiFi");
  Serial.println(WiFi.localIP());
}

char* spots[] = {"A1","A2","A3","A4","A5","A6"};
long duration[6];
long distance[6];
bool availability[6];
bool last_availability[6];
int P[] = {P1, P2, P3, P4, P5, P6};
int res[] = {0,0,0,0,0,0};

//senzor spotA1
int TRIG1 = 16;                 
int ECHO1 = 17;                 

//senzor spotA2
int TRIG2 = 18;                 
int ECHO2 = 19;                  

//senzor spotA3
int TRIG3 = 23;                  
int ECHO3 = 25;                  

//senzor spotA4
int TRIG4 = 26;                  
int ECHO4 = 27;                  

//senzor spotA5
int TRIG5 = 32;                  
int ECHO5 = 33;                  

//senzor spotA6
int TRIG6 = 4;                 
int ECHO6 = 5;                 


// Initialise PCF8574 module at 0x20
PCF8574 pcf8574(0x20);

// Returns the distance measured by a sensor
long measure_distance(int TRIG, int ECHO){
  digitalWrite(TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);
  long duration = pulseIn(ECHO, HIGH);
  long distance = (duration / 2) / 29.1; 
  return distance;
}

// Called when the MCU receives a reservation message
void callback(char* topic, byte* message, unsigned int length){
  String messageTemp;
  char toSend[50];

  for(int i = 0; i < length; i++){
    messageTemp += (char)message[i];
  }

  // Decides what parking spot needs to be reserved/freed
  for(int i = 1; i <= 6; i++){
    char y[3];
    itoa(i,y,10);
    if(messageTemp[0]=='A' && messageTemp[1]==y[0]){
      if(messageTemp[3]=='y'){
        res[i-1]=1;
        sprintf(toSend, "spotA%d distance=%d,availability=%d", i, 0, 2);
        client.publish("esp32/spots", toSend);
        pcf8574.digitalWrite(P[i-1], HIGH);
      }
      if(messageTemp[3]=='n'){
        res[i-1]=0;
        sprintf(toSend, "spotA%d distance=%d,availability=%d", i, 20, 1);
        client.publish("esp32/spots", toSend);
        pcf8574.digitalWrite(P[i-1], LOW);
      }
    }
  }
}

// Determines the actual availability
int check_availability(String spot, int led, int distance, bool availability){
    if (distance < 10) {
      Serial.print(spot);
      Serial.print(" ocupat, ");
      Serial.println(distance);
      availability = false;
      pcf8574.digitalWrite(led, HIGH);
      return availability;
    }
    if (distance > 10) {
      Serial.print(spot);
      Serial.print(" disponibil, ");
      Serial.println(distance);
      availability = true;
      pcf8574.digitalWrite(led, LOW);
      return availability;
    }
}

// Verifies if the spot changed its availability
bool check_update(int spot, bool availability, bool last_availability, long distance){
  if (availability != last_availability){
      char message[50];
      sprintf(message, "spotA%d distance=%d,availability=%d", spot, distance, availability);
      Serial.println(message);
      // In cazul in care publicarea mesajului esueaza, se va reincera la urmatoarea masuratoare
      if(client.publish("esp32/spots", message)) return availability;
      else return last_availability;
    }
    else return last_availability;
}


void setup() {
  delay(1000);
  Serial.begin (115200);

  // Activates internal pull-up resistors
  Wire.begin();

  pcf8574.pinMode(P1, OUTPUT);
  pcf8574.pinMode(P2, OUTPUT);
  pcf8574.pinMode(P3, OUTPUT);
  pcf8574.pinMode(P4, OUTPUT);
  pcf8574.pinMode(P5, OUTPUT);
  pcf8574.pinMode(P6, OUTPUT);
  pcf8574.begin();
  
  pinMode(TRIG1, OUTPUT); 
  pinMode(ECHO1, INPUT);  
  pinMode(TRIG2, OUTPUT); 
  pinMode(ECHO2, INPUT);  
  pinMode(TRIG3, OUTPUT); 
  pinMode(ECHO3, INPUT);  
  pinMode(TRIG4, OUTPUT); 
  pinMode(ECHO4, INPUT);  
  pinMode(TRIG5, OUTPUT); 
  pinMode(ECHO5, INPUT);  
  pinMode(TRIG6, OUTPUT); 
  pinMode(ECHO6, INPUT);  

  WiFi.config(ip, gateway, subnet);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  client.subscribe("reserve");

}

void loop() {
  unsigned long currentMillis = millis();

  if(currentMillis - previousMillis >= interval){
    previousMillis = currentMillis;
    
    distance[0] = measure_distance(TRIG1, ECHO1);
    distance[1] = measure_distance(TRIG2, ECHO2);
    distance[2] = measure_distance(TRIG3, ECHO3);
    distance[3] = measure_distance(TRIG4, ECHO4);
    distance[4] = measure_distance(TRIG5, ECHO5);
    distance[5] = measure_distance(TRIG6, ECHO6);
      
    for(int i=0; i<6; i++){
      if (res[i] == 1) continue;
      availability[i] = check_availability(spots[i], P[i], distance[i], availability[i]);
    }

    if(WiFi.status()== WL_CONNECTED){
      if(!client.connected())
        reconnect();
      if(!client.loop())
        client.connect("ESP32Client");
      
      char rssi[50];
      sprintf(rssi, "rssi rssi=%d", WiFi.RSSI());
      client.publish("esp32/rssi", rssi);
      
      for(int i=0; i<6; i++){
        if (res[i] == 1) continue;
        last_availability[i] = check_update(i+1, availability[i], last_availability[i], distance[i], res[i]);
      }
    } 
    else setup_wifi();
  }
}
