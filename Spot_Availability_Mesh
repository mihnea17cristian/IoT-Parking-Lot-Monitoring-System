#include <Arduino.h>
#include <Wire.h>
#include <PCF8574.h>
#include <painlessMesh.h>

// Definirea datelor de conectare la reteaua mesh
#define   MESH_PREFIX     "parq"
#define   MESH_PASSWORD   "parq"
#define   MESH_PORT       5555

Scheduler userScheduler;
painlessMesh  mesh;

// Definirea celor doua variabile prin care se limiteaza publicarea mesajelor
unsigned long previousMillis = 0;
const long interval = 5000;

// Definirea vectorilor utilizati la aflarea disponibilitatii locurilor de parcare
char* spots[] = {"A1","A2","A3","A4","A5","A6"};
long duration[6];
long distance[6];
bool availability[6];
bool last_availability[6];
int P[] = {P1, P2, P3, P4, P5, P6};
int res[] = {0,0,0,0,0,0};

// Definirea pinilor la care sunt conectati senzorii HC-SR04
//senzor spot1
int TRIG1 = 16;                  
int ECHO1 = 17;                  

//senzor spot2
int TRIG2 = 18;                  
int ECHO2 = 19;                  

//senzor spot3
int TRIG3 = 23;                  
int ECHO3 = 25;                  

//senzor spot4
int TRIG4 = 26;                  
int ECHO4 = 27;                  

//senzor spot5
int TRIG5 = 32;                  
int ECHO5 = 33;                  

//senzor spot6
int TRIG6 = 4;                  
int ECHO6 = 5;                  

// Initializarea modulului PCF8574 la adresa 0x20
PCF8574 pcf8574(0x20);

// Functie care returneaza distanta masurata de un senzor
long measure_distance(int TRIG, int ECHO){
  digitalWrite(TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);
  long duration = pulseIn(ECHO, HIGH);
  long distance = (duration / 2) / 29.1;
  if (distance>100) distance = 100;  
  return distance;
}

// Function that decides if the spot is available or empty
int check_availability(String spot, int led, int distance, bool availability){
    if (distance < 10) {
      Serial.print(spot);
      Serial.print(" oocupat, ");
      Serial.println(distance);
      availability = false;
      pcf8574.digitalWrite(led, HIGH);
      return availability;
    }
    if (distance > 10) {
      Serial.print(spot);
      Serial.print(" disponibil, ");
      Serial.println(distance);
      availability = true;
      pcf8574.digitalWrite(led, LOW);
      return availability;
    }
}

// Functie prin care se determina starea actuala a locului
bool check_update(int spot, bool availability, bool last_availability, long distance){
  if ( availability != last_availability ){
      char message[50];
      sprintf(message, "spotA%d distance=%d,availability=%d", spot, distance, availability);
      Serial.println(message);
      mesh.sendSingle(3166741604, message);
      //mesh.sendBroadcast(message);
      return availability;
    }
    else return last_availability;
}

// Functie care se activeaza in momentul receptionarii unui mesaj de rezervare
void receivedCallback(uint32_t from, String &msg) {
  char toSend[50];
  
  // Se decide ce loc de parcare trebuie rezervat/eliberat
  for (int i = 1; i <= 6; i++) {
    char y[3];
    itoa(i,y,10);
    if(msg[0]=='A' && msg[1]==y[0]){
      // In cazul receptionarii caracterului 'y', locul de parcare trebuie rezervat
      if(msg[3]=='y'){
        res[i-1]=1;
        sprintf(toSend, "spotA%d distance=%d,availability=%d", i, 0, 2);
        mesh.sendSingle(3166741604, toSend);
        pcf8574.digitalWrite(P[i-1], HIGH);
      }
      // In cazul receptionarii caracterului 'n', pentru loculul de parcare trebuie anulata rezervarea
      if(msg[3]=='n'){
        res[i-1]=0;
        sprintf(toSend, "spotA%d distance=%d,availability=%d", i, 20, 1);
        mesh.sendSingle(3166741604, toSend);
        pcf8574.digitalWrite(P[i-1], LOW);
      }
    }
  }
  
}

// Functii specifice retelei mesh
void newConnectionCallback(uint32_t nodeId) {
    Serial.printf("--> startHere: New Connection, nodeId = %u\n", nodeId);
}

void changedConnectionCallback() {
  Serial.printf("Changed connections\n");
}

void nodeTimeAdjustedCallback(int32_t offset) {
    Serial.printf("Adjusted time %u. Offset = %d\n", mesh.getNodeTime(),offset);
}

void setup() {
  Serial.begin(115200);

  // Se activeaza rezistentele de pull-up interne ale microcontrolerului
  Wire.begin();
  
  // initializarea conexiunii la reteaua mesh
  mesh.setDebugMsgTypes(ERROR | STARTUP);
  mesh.init(MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT);
  
  mesh.onReceive(&receivedCallback);
  mesh.onNewConnection(&newConnectionCallback);
  mesh.onChangedConnections(&changedConnectionCallback);
  mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);

  // Se anunta microcontrolerul ca reteaua mesh are un nod radacina
  mesh.setContainsRoot(true);

  // Set pinilor aflati pe modulul PCF8574
  pcf8574.pinMode(P1, OUTPUT);
  pcf8574.pinMode(P2, OUTPUT);
  pcf8574.pinMode(P3, OUTPUT);
  pcf8574.pinMode(P4, OUTPUT);
  pcf8574.pinMode(P5, OUTPUT);
  pcf8574.pinMode(P6, OUTPUT);
  pcf8574.begin();

  // Pinii ECHO au modul INPUT, in timp ce pinii TRIG au modul OUTPUT
  pinMode(TRIG1, OUTPUT); 
  pinMode(ECHO1, INPUT);  
  pinMode(TRIG2, OUTPUT); 
  pinMode(ECHO2, INPUT);  
  pinMode(TRIG3, OUTPUT); 
  pinMode(ECHO3, INPUT);  
  pinMode(TRIG4, OUTPUT);
  pinMode(ECHO4, INPUT);  
  pinMode(TRIG5, OUTPUT); 
  pinMode(ECHO5, INPUT);  
  pinMode(TRIG6, OUTPUT); 
  pinMode(ECHO6, INPUT);  
}

void loop() {
  // Se vor rula diverse sarcini de intretinere a retelei
  mesh.update();

  // Se verifica daca a trecut intervalul de timp stabilit de la ultima masuratoare
  unsigned long currentMillis = millis();
  
  if(currentMillis - previousMillis >= interval){
    previousMillis = currentMillis;
  
    distance[0] = measure_distance(TRIG1, ECHO1);
    distance[1] = measure_distance(TRIG2, ECHO2);
    distance[2] = measure_distance(TRIG3, ECHO3);
    distance[3] = measure_distance(TRIG4, ECHO4);
    distance[4] = measure_distance(TRIG5, ECHO5);
    distance[5] = measure_distance(TRIG6, ECHO6);

    // In cazul locurilor rezervate, nu se vor mai apela functiile de determinare a disponibilitatii
    for(int i=0; i<6; i++){
      if (res[i] == 1) continue;
      availability[i] = check_availability(spots[i], P[i], distance[i], availability[i]);
      last_availability[i] = check_update(i+1, availability[i], last_availability[i], distance[i]);
    }
  }    
}
